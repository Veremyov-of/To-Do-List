{"version":3,"sources":["components/Links.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","redux/mainReducer.js","redux/store.js","index.js"],"names":["Links","dispatch","useDispatch","todoItems","useSelector","state","mainReducer","useState","value","setValue","handleClick","e","name","preventDefault","type","payload","task","percent","popUp","popUpColor","switchColor","color","item","indexMain","indexOf","className","onSubmit","placeholder","onChange","target","onClick","length","map","index","to","lists","itemDelete","includes","splice","deleteList","TodoList","items","indexItem","text","push","performance","newTodoItem","calcPercent","addTodo","sizeTasks","onePercent","madeTasks","i","finalPercent","Math","round","newState","performed","itemDelet","deleteTodo","App","basename","exact","path","list","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","newStateAddTodo","newStateDelete","newStatePerformed","newStateUpDatePercent","newStateZeroingPercent","newStatePopUp","newStateSwitchColor","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.838b1b12.chunk.js","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction Links() {\r\n    const dispatch = useDispatch();\r\n    const todoItems = useSelector(state => state.mainReducer.todoItems);\r\n    const addList = (name) => {\r\n        if(name !== '') {\r\n            const item = {\r\n                name,\r\n                task: [],\r\n                percent: 0,\r\n                popUp: false,\r\n                popUpColor: 'pop-up_color_starting',\r\n            }\r\n            dispatch({type: \"ADD_LIST\", payload: item})\r\n        }   \r\n    }\r\n\r\n    const deleteList = (item) => {\r\n        const lists = [...todoItems];\r\n        let itemDelete = lists.indexOf(item);\r\n        if(lists.includes(item)) {\r\n            lists.splice(itemDelete, 1);\r\n        }\r\n        dispatch({type: \"DELETE_LIST\", payload: lists})\r\n    }\r\n    \r\n    const [value, setValue] = useState(\"\");\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n        if (!value) return;\r\n        addList(value);\r\n        setValue(\"\");\r\n      };\r\n\r\n\r\n    const popUp = (item) => {\r\n        const indexMain = todoItems.indexOf(item);\r\n        if(todoItems[indexMain].popUp) {\r\n            todoItems[indexMain].popUp = false;\r\n        } else {\r\n            todoItems[indexMain].popUp = true;\r\n        }\r\n        dispatch({type: \"POP_UP\", payload: todoItems})\r\n    }\r\n\r\n    const switchColor = (color, item) => {\r\n        const indexMain = todoItems.indexOf(item);\r\n        switch(color) {\r\n            case 'red':\r\n                todoItems[indexMain].popUpColor = 'pop-up_color_red';\r\n                todoItems[indexMain].popUp = false;\r\n                dispatch({type: \"SWITCH_COLOR\", payload: todoItems})\r\n            break;\r\n            case 'blue':\r\n                todoItems[indexMain].popUpColor = 'pop-up_color_blue';\r\n                todoItems[indexMain].popUp = false;\r\n                dispatch({type: \"SWITCH_COLOR\", payload: todoItems})\r\n            break;\r\n            case 'starting':\r\n                todoItems[indexMain].popUpColor = 'pop-up_color_starting';\r\n                todoItems[indexMain].popUp = false;\r\n                dispatch({type: \"SWITCH_COLOR\", payload: todoItems})\r\n            break;\r\n            case 'green':\r\n                todoItems[indexMain].popUpColor = 'pop-up_color_green';\r\n                todoItems[indexMain].popUp = false;\r\n                dispatch({type: \"SWITCH_COLOR\", payload: todoItems})\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n            \r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container_block\">\r\n                <h1 className=\"title\">To Do List</h1>\r\n                <form className=\"form_group\" onSubmit={handleClick}>\r\n                    <input className=\"input_group\" placeholder='Name Group' value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\r\n                    <button className=\"btn_group\" onClick={handleClick}>Add Group</button>\r\n                </form>\r\n            </div>\r\n            {todoItems.length > 0 ?\r\n            <div>\r\n                {todoItems.map((item, index) => \r\n                <div key={index} className=\"transparent_block\">\r\n                    <div className={`link_block ${item.popUpColor}`}>\r\n\r\n                    <button className=\"button_pop-up\" onClick={() => popUp(item)}><div className={`pop-up_color ${item.popUpColor}`}></div></button>\r\n                    <div className={`pop-up ${todoItems[index].popUp === true ? 'popActive': ''}`}>\r\n                        <button onClick={() => switchColor('red',item)}><div className=\"button-pop-up pop-up_color_red\"></div></button>\r\n                        <button onClick={() => switchColor('blue',item)}><div className=\"button-pop-up pop-up_color_blue\"></div></button>\r\n                        <button onClick={() => switchColor('green',item)}><div className=\"button-pop-up pop-up_color_green\"></div></button>\r\n                        <button onClick={() => switchColor('starting',item)}><div className=\"button-pop-up pop-up_color_starting\"></div></button>\r\n                    </div>\r\n\r\n                    <Link className=\"link\" to={`${item.name}`}><div className=\"link_text\" >{item.name}</div></Link>\r\n                    <div className=\"delete_link\"><button onClick={() => deleteList(item)}></button></div>\r\n                    <div className=\"percent_link\">{`${item.percent}%`}</div>\r\n                </div>\r\n                </div>\r\n                )}\r\n            </div>\r\n            :\r\n            <div className=\"title_create\">\r\n                <h2>Сreate a new list...</h2>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Links;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction TodoList({name, items}) {\r\n    const dispatch = useDispatch();\r\n    const todoItems = useSelector(state => state.mainReducer.todoItems);\r\n    const indexItem = todoItems.indexOf(items);\r\n    const addTodo = (text) => {\r\n        if(text !== '') {\r\n            const index = todoItems.indexOf(items);\r\n            todoItems[index].task.push({text: text, performance: false});\r\n            const newTodoItem = todoItems[index];\r\n            const item = {\r\n                newTodoItem\r\n            }\r\n            dispatch({type: \"ADD_TODO\", payload: item})\r\n            calcPercent();\r\n        }\r\n    }\r\n    const [value, setValue] = useState(\"\");\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n        if (!value) return;\r\n        addTodo(value);\r\n        setValue(\"\");\r\n      };\r\n\r\n    const deleteTodo = (item) => {\r\n        let itemDelet = items.task.indexOf(item);\r\n        items.task.splice(itemDelet, 1);\r\n        dispatch({type: \"DELETE_TODO\", payload: items});\r\n        calcPercent();\r\n    }\r\n\r\n    const performed = (item) => {\r\n        const indexMain = todoItems.indexOf(items);\r\n        const indexItem = items.task.indexOf(item);\r\n        if(todoItems[indexMain].task[indexItem].performance) {\r\n            todoItems[indexMain].task[indexItem].performance = false;\r\n        } else {\r\n            todoItems[indexMain].task[indexItem].performance = true;\r\n        }\r\n        dispatch({type: \"PERFORMED_TODO\", payload: todoItems})\r\n        calcPercent();\r\n    }\r\n    \r\n     const calcPercent = () => {\r\n        const sizeTasks = todoItems[indexItem].task.length;\r\n        const onePercent = 100 / sizeTasks;\r\n        let madeTasks = 0;\r\n        for(let i = 0; i < sizeTasks; i++) {\r\n            if(items.task[i].performance) {\r\n                madeTasks += 1;\r\n            }\r\n        }\r\n        if(madeTasks > 0) {\r\n            const finalPercent = Math.round(madeTasks * onePercent);\r\n            const newState = todoItems;\r\n            newState[indexItem].percent = finalPercent;\r\n            dispatch({type: \"UPDATE_PERCENT\", payload: newState})\r\n        } else {\r\n            const newState = todoItems;\r\n            newState[indexItem].percent = 0;\r\n            dispatch({type: \"ZEROING_PERCENT\", payload: newState})\r\n        }\r\n    }    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container_todolist\">\r\n                <div className=\"title_todolist\"><h1>{name}</h1></div>\r\n                <form className=\"form_todolist\" onSubmit={handleClick}>\r\n                    <input className=\"input_todolist\" placeholder=\"Task\" value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\r\n                    <button className=\"btn_todolist\" onClick={handleClick}>+</button>\r\n                </form>\r\n                <div className=\"percent_todo\">{`${todoItems[indexItem].percent}%`}</div>\r\n                <div className=\"home\"><Link className=\"home_link\" to='/'>link</Link></div>\r\n            </div>\r\n            <div className=\"container_items\">\r\n                {items.task.map((item, index) =>\r\n                    <div className={`${item.performance ? 'block_active' : ''} task_block`} key={index}>\r\n                        <div className={`${item.performance ? 'performed' : ''} task_name`} ><span>{item.text}</span></div>\r\n                        <div className=\"task_btn\">\r\n                            <button className={`task_performed ${item.performance ? 'active' : ''}`} onClick={() => performed(item)}></button>\r\n                            <button className=\"task_delete\" onClick={() => deleteTodo(item)}></button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default TodoList;","import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport {useSelector} from 'react-redux';\r\nimport \"./App.css\";\r\n\r\n//components\r\nimport Links from \"./components/Links\"\r\nimport TodoList from \"./components/TodoList\";\r\n\r\n\r\nfunction App() {\r\n  const lists = useSelector(state => state.mainReducer.todoItems);\r\n  return (\r\n      <div className=\"container\">\r\n        <Router basename=\"/To-Do-List\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Links />\r\n            </Route>\r\n            {lists.map((list, index) => \r\n              <Route key={index} path={`/${list.name}`}>\r\n                <TodoList name={list.name} items={list}/>\r\n              </Route>\r\n            )}\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    todoItems: [\r\n        {\r\n            name: 'Work',\r\n            task: [{ text: 'buy icecream', performance: false },\r\n            { text: 'buy cake', performance: false},\r\n            { text: 'buy meet', performance: false},\r\n            { text: 'buy chocolate', performance: false },\r\n            { text: 'buy milk', performance: false }],\r\n            percent: 0,\r\n            popUp: false,\r\n            popUpColor: 'pop-up_color_starting'\r\n        },\r\n        {\r\n            name: 'Home',\r\n            task: [{ text: 'homework', performance: false }],\r\n            percent: 0,\r\n            popUp: false,\r\n            popUpColor: 'pop-up_color_starting'\r\n        }, \r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case \"ADD_LIST\":\r\n            return {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n        case \"DELETE_LIST\":\r\n            return {\r\n                ...state,\r\n                todoItems: action.payload\r\n            }\r\n\r\n        case \"ADD_TODO\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStateAddTodo = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStateAddTodo.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStateAddTodo;\r\n            return state;\r\n\r\n            \r\n        case \"DELETE_TODO\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStateDelete = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStateDelete.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStateDelete;\r\n            return state;\r\n\r\n        case \"PERFORMED_TODO\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStatePerformed = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStatePerformed.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStatePerformed;\r\n            return state;\r\n        case \"UPDATE_PERCENT\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStateUpDatePercent = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStateUpDatePercent.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStateUpDatePercent;\r\n            return state;\r\n        case \"ZEROING_PERCENT\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStateZeroingPercent = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStateZeroingPercent.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStateZeroingPercent;\r\n            return state;\r\n        case \"POP_UP\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStatePopUp = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStatePopUp.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStatePopUp;\r\n            return state;\r\n        case \"SWITCH_COLOR\":\r\n            state = {\r\n                ...state,\r\n                todoItems: [\r\n                    ...state.todoItems,\r\n                    action.payload\r\n                ]\r\n            }\r\n            const newStateSwitchColor = []\r\n            for(let i = 0; i < state.todoItems.length - 1; i++) {\r\n                newStateSwitchColor.push(state.todoItems[i])\r\n            }\r\n            state.todoItems = newStateSwitchColor;\r\n            return state;\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default reducer;","// import reducer from \"./reducer\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport mainReducer from './mainReducer';\r\nconst rootReducer = combineReducers({\r\n    mainReducer,\r\n})\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}